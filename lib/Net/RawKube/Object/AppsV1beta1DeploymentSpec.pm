=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::RawKube::Object::AppsV1beta1DeploymentSpec;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#DeploymentSpec is the specification of the desired behavior of the Deployment.
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "Net::RawKube::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'DeploymentSpec is the specification of the desired behavior of the Deployment.',
                                  class => 'AppsV1beta1DeploymentSpec',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'min_ready_seconds' => {
    	datatype => 'int',
    	base_name => 'minReadySeconds',
    	description => 'Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)',
    	format => '',
    	read_only => '',
    		},
    'paused' => {
    	datatype => 'boolean',
    	base_name => 'paused',
    	description => 'Indicates that the deployment is paused.',
    	format => '',
    	read_only => '',
    		},
    'progress_deadline_seconds' => {
    	datatype => 'int',
    	base_name => 'progressDeadlineSeconds',
    	description => 'The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.',
    	format => '',
    	read_only => '',
    		},
    'replicas' => {
    	datatype => 'int',
    	base_name => 'replicas',
    	description => 'Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.',
    	format => '',
    	read_only => '',
    		},
    'revision_history_limit' => {
    	datatype => 'int',
    	base_name => 'revisionHistoryLimit',
    	description => 'The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.',
    	format => '',
    	read_only => '',
    		},
    'rollback_to' => {
    	datatype => 'AppsV1beta1RollbackConfig',
    	base_name => 'rollbackTo',
    	description => 'The config this deployment is rolling back to. Will be cleared after rollback is done.',
    	format => '',
    	read_only => '',
    		},
    'selector' => {
    	datatype => 'V1LabelSelector',
    	base_name => 'selector',
    	description => 'Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.',
    	format => '',
    	read_only => '',
    		},
    'strategy' => {
    	datatype => 'AppsV1beta1DeploymentStrategy',
    	base_name => 'strategy',
    	description => 'The deployment strategy to use to replace existing pods with new ones.',
    	format => '',
    	read_only => '',
    		},
    'template' => {
    	datatype => 'V1PodTemplateSpec',
    	base_name => 'template',
    	description => 'Template describes the pods that will be created.',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'min_ready_seconds' => 'int',
    'paused' => 'boolean',
    'progress_deadline_seconds' => 'int',
    'replicas' => 'int',
    'revision_history_limit' => 'int',
    'rollback_to' => 'AppsV1beta1RollbackConfig',
    'selector' => 'V1LabelSelector',
    'strategy' => 'AppsV1beta1DeploymentStrategy',
    'template' => 'V1PodTemplateSpec'
} );

__PACKAGE__->attribute_map( {
    'min_ready_seconds' => 'minReadySeconds',
    'paused' => 'paused',
    'progress_deadline_seconds' => 'progressDeadlineSeconds',
    'replicas' => 'replicas',
    'revision_history_limit' => 'revisionHistoryLimit',
    'rollback_to' => 'rollbackTo',
    'selector' => 'selector',
    'strategy' => 'strategy',
    'template' => 'template'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
