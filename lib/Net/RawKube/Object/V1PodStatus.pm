=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::RawKube::Object::V1PodStatus;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#PodStatus represents information about the status of a pod. Status may trail the actual state of a system.
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "Net::RawKube::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'PodStatus represents information about the status of a pod. Status may trail the actual state of a system.',
                                  class => 'V1PodStatus',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'conditions' => {
    	datatype => 'ARRAY[V1PodCondition]',
    	base_name => 'conditions',
    	description => 'Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions',
    	format => '',
    	read_only => '',
    		},
    'container_statuses' => {
    	datatype => 'ARRAY[V1ContainerStatus]',
    	base_name => 'containerStatuses',
    	description => 'The list has one entry per container in the manifest. Each entry is currently the output of &#x60;docker inspect&#x60;. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status',
    	format => '',
    	read_only => '',
    		},
    'host_ip' => {
    	datatype => 'string',
    	base_name => 'hostIP',
    	description => 'IP address of the host to which the pod is assigned. Empty if not yet scheduled.',
    	format => '',
    	read_only => '',
    		},
    'init_container_statuses' => {
    	datatype => 'ARRAY[V1ContainerStatus]',
    	base_name => 'initContainerStatuses',
    	description => 'The list has one entry per init container in the manifest. The most recent successful init container will have ready &#x3D; true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status',
    	format => '',
    	read_only => '',
    		},
    'message' => {
    	datatype => 'string',
    	base_name => 'message',
    	description => 'A human readable message indicating details about why the pod is in this condition.',
    	format => '',
    	read_only => '',
    		},
    'phase' => {
    	datatype => 'string',
    	base_name => 'phase',
    	description => 'Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase',
    	format => '',
    	read_only => '',
    		},
    'pod_ip' => {
    	datatype => 'string',
    	base_name => 'podIP',
    	description => 'IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.',
    	format => '',
    	read_only => '',
    		},
    'qos_class' => {
    	datatype => 'string',
    	base_name => 'qosClass',
    	description => 'The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md',
    	format => '',
    	read_only => '',
    		},
    'reason' => {
    	datatype => 'string',
    	base_name => 'reason',
    	description => 'A brief CamelCase message indicating details about why the pod is in this state. e.g. &#39;OutOfDisk&#39;',
    	format => '',
    	read_only => '',
    		},
    'start_time' => {
    	datatype => 'DateTime',
    	base_name => 'startTime',
    	description => 'RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'conditions' => 'ARRAY[V1PodCondition]',
    'container_statuses' => 'ARRAY[V1ContainerStatus]',
    'host_ip' => 'string',
    'init_container_statuses' => 'ARRAY[V1ContainerStatus]',
    'message' => 'string',
    'phase' => 'string',
    'pod_ip' => 'string',
    'qos_class' => 'string',
    'reason' => 'string',
    'start_time' => 'DateTime'
} );

__PACKAGE__->attribute_map( {
    'conditions' => 'conditions',
    'container_statuses' => 'containerStatuses',
    'host_ip' => 'hostIP',
    'init_container_statuses' => 'initContainerStatuses',
    'message' => 'message',
    'phase' => 'phase',
    'pod_ip' => 'podIP',
    'qos_class' => 'qosClass',
    'reason' => 'reason',
    'start_time' => 'startTime'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
