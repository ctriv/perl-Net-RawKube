=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::RawKube::Object::V1beta1PodSecurityPolicySpec;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#Pod Security Policy Spec defines the policy enforced.
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "Net::RawKube::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Pod Security Policy Spec defines the policy enforced.',
                                  class => 'V1beta1PodSecurityPolicySpec',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'allowed_capabilities' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'allowedCapabilities',
    	description => 'AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author&#39;s discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.',
    	format => '',
    	read_only => '',
    		},
    'default_add_capabilities' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'defaultAddCapabilities',
    	description => 'DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.',
    	format => '',
    	read_only => '',
    		},
    'fs_group' => {
    	datatype => 'V1beta1FSGroupStrategyOptions',
    	base_name => 'fsGroup',
    	description => 'FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.',
    	format => '',
    	read_only => '',
    		},
    'host_ipc' => {
    	datatype => 'boolean',
    	base_name => 'hostIPC',
    	description => 'hostIPC determines if the policy allows the use of HostIPC in the pod spec.',
    	format => '',
    	read_only => '',
    		},
    'host_network' => {
    	datatype => 'boolean',
    	base_name => 'hostNetwork',
    	description => 'hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.',
    	format => '',
    	read_only => '',
    		},
    'host_pid' => {
    	datatype => 'boolean',
    	base_name => 'hostPID',
    	description => 'hostPID determines if the policy allows the use of HostPID in the pod spec.',
    	format => '',
    	read_only => '',
    		},
    'host_ports' => {
    	datatype => 'ARRAY[V1beta1HostPortRange]',
    	base_name => 'hostPorts',
    	description => 'hostPorts determines which host port ranges are allowed to be exposed.',
    	format => '',
    	read_only => '',
    		},
    'privileged' => {
    	datatype => 'boolean',
    	base_name => 'privileged',
    	description => 'privileged determines if a pod can request to be run as privileged.',
    	format => '',
    	read_only => '',
    		},
    'read_only_root_filesystem' => {
    	datatype => 'boolean',
    	base_name => 'readOnlyRootFilesystem',
    	description => 'ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.',
    	format => '',
    	read_only => '',
    		},
    'required_drop_capabilities' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'requiredDropCapabilities',
    	description => 'RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.',
    	format => '',
    	read_only => '',
    		},
    'run_as_user' => {
    	datatype => 'V1beta1RunAsUserStrategyOptions',
    	base_name => 'runAsUser',
    	description => 'runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.',
    	format => '',
    	read_only => '',
    		},
    'se_linux' => {
    	datatype => 'V1beta1SELinuxStrategyOptions',
    	base_name => 'seLinux',
    	description => 'seLinux is the strategy that will dictate the allowable labels that may be set.',
    	format => '',
    	read_only => '',
    		},
    'supplemental_groups' => {
    	datatype => 'V1beta1SupplementalGroupsStrategyOptions',
    	base_name => 'supplementalGroups',
    	description => 'SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.',
    	format => '',
    	read_only => '',
    		},
    'volumes' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'volumes',
    	description => 'volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'allowed_capabilities' => 'ARRAY[string]',
    'default_add_capabilities' => 'ARRAY[string]',
    'fs_group' => 'V1beta1FSGroupStrategyOptions',
    'host_ipc' => 'boolean',
    'host_network' => 'boolean',
    'host_pid' => 'boolean',
    'host_ports' => 'ARRAY[V1beta1HostPortRange]',
    'privileged' => 'boolean',
    'read_only_root_filesystem' => 'boolean',
    'required_drop_capabilities' => 'ARRAY[string]',
    'run_as_user' => 'V1beta1RunAsUserStrategyOptions',
    'se_linux' => 'V1beta1SELinuxStrategyOptions',
    'supplemental_groups' => 'V1beta1SupplementalGroupsStrategyOptions',
    'volumes' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'allowed_capabilities' => 'allowedCapabilities',
    'default_add_capabilities' => 'defaultAddCapabilities',
    'fs_group' => 'fsGroup',
    'host_ipc' => 'hostIPC',
    'host_network' => 'hostNetwork',
    'host_pid' => 'hostPID',
    'host_ports' => 'hostPorts',
    'privileged' => 'privileged',
    'read_only_root_filesystem' => 'readOnlyRootFilesystem',
    'required_drop_capabilities' => 'requiredDropCapabilities',
    'run_as_user' => 'runAsUser',
    'se_linux' => 'seLinux',
    'supplemental_groups' => 'supplementalGroups',
    'volumes' => 'volumes'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
