=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::RawKube::ExtensionsV1beta1Api;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Net::RawKube::ApiClient;
use Net::RawKube::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => Net::RawKube::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_namespaced_daemon_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1DaemonSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1DaemonSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub create_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_daemon_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# create_namespaced_deployment
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Deployment $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Deployment',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub create_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_deployment");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# create_namespaced_deployment_rollback
#
# 
# 
# @param string $name name of the DeploymentRollback (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1DeploymentRollback $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DeploymentRollback',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1DeploymentRollback',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_deployment_rollback' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1DeploymentRollback',
        };
}
# @return ExtensionsV1beta1DeploymentRollback
#
sub create_namespaced_deployment_rollback {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling create_namespaced_deployment_rollback");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_deployment_rollback");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_deployment_rollback");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1DeploymentRollback', $response);
    return $_response_object;
}

#
# create_namespaced_ingress
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1Ingress $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1Ingress',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub create_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_ingress");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# create_namespaced_network_policy
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1NetworkPolicy $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1NetworkPolicy',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicy',
        };
}
# @return V1beta1NetworkPolicy
#
sub create_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_network_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicy', $response);
    return $_response_object;
}

#
# create_namespaced_replica_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1ReplicaSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1ReplicaSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub create_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_replica_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# create_pod_security_policy
#
# 
# 
# @param V1beta1PodSecurityPolicy $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'body' => {
        data_type => 'V1beta1PodSecurityPolicy',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1PodSecurityPolicy',
        };
}
# @return V1beta1PodSecurityPolicy
#
sub create_pod_security_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_pod_security_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1PodSecurityPolicy', $response);
    return $_response_object;
}

#
# create_third_party_resource
#
# 
# 
# @param V1beta1ThirdPartyResource $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'body' => {
        data_type => 'V1beta1ThirdPartyResource',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ThirdPartyResource',
        };
}
# @return V1beta1ThirdPartyResource
#
sub create_third_party_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_third_party_resource");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ThirdPartyResource', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_daemon_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_deployment
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_ingress
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_network_policy
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_replica_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_pod_security_policy
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_pod_security_policy {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_third_party_resource
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_third_party_resource {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_daemon_set
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_daemon_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_daemon_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_deployment
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_deployment");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_deployment");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_ingress
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_ingress");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_ingress");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_network_policy
#
# 
# 
# @param string $name name of the NetworkPolicy (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the NetworkPolicy',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_network_policy");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_network_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_replica_set
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_replica_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_replica_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_pod_security_policy
#
# 
# 
# @param string $name name of the PodSecurityPolicy (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the PodSecurityPolicy',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_pod_security_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_pod_security_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_pod_security_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_third_party_resource
#
# 
# 
# @param string $name name of the ThirdPartyResource (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ThirdPartyResource',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_third_party_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_third_party_resource");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_third_party_resource");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# get_api_resources
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_api_resources' } = { 
    	summary => '',
        params => $params,
        returns => 'V1APIResourceList',
        };
}
# @return V1APIResourceList
#
sub get_api_resources {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1APIResourceList', $response);
    return $_response_object;
}

#
# list_daemon_set_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_daemon_set_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSetList',
        };
}
# @return V1beta1DaemonSetList
#
sub list_daemon_set_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/daemonsets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSetList', $response);
    return $_response_object;
}

#
# list_deployment_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_deployment_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1DeploymentList',
        };
}
# @return ExtensionsV1beta1DeploymentList
#
sub list_deployment_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/deployments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1DeploymentList', $response);
    return $_response_object;
}

#
# list_ingress_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_ingress_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1IngressList',
        };
}
# @return V1beta1IngressList
#
sub list_ingress_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/ingresses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1IngressList', $response);
    return $_response_object;
}

#
# list_namespaced_daemon_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSetList',
        };
}
# @return V1beta1DaemonSetList
#
sub list_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSetList', $response);
    return $_response_object;
}

#
# list_namespaced_deployment
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1DeploymentList',
        };
}
# @return ExtensionsV1beta1DeploymentList
#
sub list_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1DeploymentList', $response);
    return $_response_object;
}

#
# list_namespaced_ingress
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1IngressList',
        };
}
# @return V1beta1IngressList
#
sub list_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1IngressList', $response);
    return $_response_object;
}

#
# list_namespaced_network_policy
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicyList',
        };
}
# @return V1beta1NetworkPolicyList
#
sub list_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicyList', $response);
    return $_response_object;
}

#
# list_namespaced_replica_set
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSetList',
        };
}
# @return V1beta1ReplicaSetList
#
sub list_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSetList', $response);
    return $_response_object;
}

#
# list_network_policy_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_network_policy_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicyList',
        };
}
# @return V1beta1NetworkPolicyList
#
sub list_network_policy_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/networkpolicies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicyList', $response);
    return $_response_object;
}

#
# list_pod_security_policy
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1PodSecurityPolicyList',
        };
}
# @return V1beta1PodSecurityPolicyList
#
sub list_pod_security_policy {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1PodSecurityPolicyList', $response);
    return $_response_object;
}

#
# list_replica_set_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_replica_set_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSetList',
        };
}
# @return V1beta1ReplicaSetList
#
sub list_replica_set_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/replicasets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSetList', $response);
    return $_response_object;
}

#
# list_third_party_resource
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ThirdPartyResourceList',
        };
}
# @return V1beta1ThirdPartyResourceList
#
sub list_third_party_resource {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ThirdPartyResourceList', $response);
    return $_response_object;
}

#
# patch_namespaced_daemon_set
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub patch_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_daemon_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_daemon_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# patch_namespaced_daemon_set_status
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_daemon_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub patch_namespaced_daemon_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_daemon_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_daemon_set_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_daemon_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# patch_namespaced_deployment
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub patch_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_deployment");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_deployment");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# patch_namespaced_deployment_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_deployment_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub patch_namespaced_deployment_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_deployment_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_deployment_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_deployment_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# patch_namespaced_deployment_status
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_deployment_status' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub patch_namespaced_deployment_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_deployment_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_deployment_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_deployment_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# patch_namespaced_ingress
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub patch_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_ingress");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_ingress");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# patch_namespaced_ingress_status
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_ingress_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub patch_namespaced_ingress_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_ingress_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_ingress_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_ingress_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# patch_namespaced_network_policy
#
# 
# 
# @param string $name name of the NetworkPolicy (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the NetworkPolicy',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicy',
        };
}
# @return V1beta1NetworkPolicy
#
sub patch_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_network_policy");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_network_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicy', $response);
    return $_response_object;
}

#
# patch_namespaced_replica_set
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub patch_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_replica_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_replica_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# patch_namespaced_replica_set_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_replica_set_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub patch_namespaced_replica_set_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_replica_set_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_replica_set_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_replica_set_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# patch_namespaced_replica_set_status
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_replica_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub patch_namespaced_replica_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_replica_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_replica_set_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_replica_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# patch_namespaced_replication_controller_dummy_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_replication_controller_dummy_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub patch_namespaced_replication_controller_dummy_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_replication_controller_dummy_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_replication_controller_dummy_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_replication_controller_dummy_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# patch_pod_security_policy
#
# 
# 
# @param string $name name of the PodSecurityPolicy (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the PodSecurityPolicy',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1PodSecurityPolicy',
        };
}
# @return V1beta1PodSecurityPolicy
#
sub patch_pod_security_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_pod_security_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_pod_security_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1PodSecurityPolicy', $response);
    return $_response_object;
}

#
# patch_third_party_resource
#
# 
# 
# @param string $name name of the ThirdPartyResource (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ThirdPartyResource',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ThirdPartyResource',
        };
}
# @return V1beta1ThirdPartyResource
#
sub patch_third_party_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_third_party_resource");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_third_party_resource");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ThirdPartyResource', $response);
    return $_response_object;
}

#
# read_namespaced_daemon_set
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub read_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_daemon_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# read_namespaced_daemon_set_status
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_daemon_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub read_namespaced_daemon_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_daemon_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_daemon_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# read_namespaced_deployment
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub read_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_deployment");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# read_namespaced_deployment_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_deployment_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub read_namespaced_deployment_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_deployment_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_deployment_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# read_namespaced_deployment_status
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_deployment_status' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub read_namespaced_deployment_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_deployment_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_deployment_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# read_namespaced_ingress
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub read_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_ingress");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# read_namespaced_ingress_status
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_ingress_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub read_namespaced_ingress_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_ingress_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_ingress_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# read_namespaced_network_policy
#
# 
# 
# @param string $name name of the NetworkPolicy (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the NetworkPolicy',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicy',
        };
}
# @return V1beta1NetworkPolicy
#
sub read_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_network_policy");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicy', $response);
    return $_response_object;
}

#
# read_namespaced_replica_set
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub read_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_replica_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# read_namespaced_replica_set_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_replica_set_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub read_namespaced_replica_set_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_replica_set_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_replica_set_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# read_namespaced_replica_set_status
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_replica_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub read_namespaced_replica_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_replica_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_replica_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# read_namespaced_replication_controller_dummy_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_replication_controller_dummy_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub read_namespaced_replication_controller_dummy_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_replication_controller_dummy_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_replication_controller_dummy_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# read_pod_security_policy
#
# 
# 
# @param string $name name of the PodSecurityPolicy (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the PodSecurityPolicy',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1PodSecurityPolicy',
        };
}
# @return V1beta1PodSecurityPolicy
#
sub read_pod_security_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_pod_security_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1PodSecurityPolicy', $response);
    return $_response_object;
}

#
# read_third_party_resource
#
# 
# 
# @param string $name name of the ThirdPartyResource (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param boolean $exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)
# @param boolean $export Should this value be exported.  Export strips fields that a user can not specify. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ThirdPartyResource',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'exact' => {
        data_type => 'boolean',
        description => 'Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.',
        required => '0',
    },
    'export' => {
        data_type => 'boolean',
        description => 'Should this value be exported.  Export strips fields that a user can not specify.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ThirdPartyResource',
        };
}
# @return V1beta1ThirdPartyResource
#
sub read_third_party_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_third_party_resource");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'export'}) {
        $query_params->{'export'} = $self->{api_client}->to_query_value($args{'export'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ThirdPartyResource', $response);
    return $_response_object;
}

#
# replace_namespaced_daemon_set
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1DaemonSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1DaemonSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_daemon_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub replace_namespaced_daemon_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_daemon_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_daemon_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_daemon_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# replace_namespaced_daemon_set_status
#
# 
# 
# @param string $name name of the DaemonSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1DaemonSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the DaemonSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1DaemonSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_daemon_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1DaemonSet',
        };
}
# @return V1beta1DaemonSet
#
sub replace_namespaced_daemon_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_daemon_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_daemon_set_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_daemon_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1DaemonSet', $response);
    return $_response_object;
}

#
# replace_namespaced_deployment
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Deployment $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Deployment',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_deployment' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub replace_namespaced_deployment {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_deployment");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_deployment");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_deployment");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# replace_namespaced_deployment_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Scale $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Scale',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_deployment_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub replace_namespaced_deployment_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_deployment_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_deployment_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_deployment_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# replace_namespaced_deployment_status
#
# 
# 
# @param string $name name of the Deployment (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Deployment $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Deployment',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Deployment',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_deployment_status' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Deployment',
        };
}
# @return ExtensionsV1beta1Deployment
#
sub replace_namespaced_deployment_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_deployment_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_deployment_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_deployment_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Deployment', $response);
    return $_response_object;
}

#
# replace_namespaced_ingress
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1Ingress $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1Ingress',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_ingress' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub replace_namespaced_ingress {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_ingress");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_ingress");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_ingress");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# replace_namespaced_ingress_status
#
# 
# 
# @param string $name name of the Ingress (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1Ingress $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Ingress',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1Ingress',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_ingress_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1Ingress',
        };
}
# @return V1beta1Ingress
#
sub replace_namespaced_ingress_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_ingress_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_ingress_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_ingress_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1Ingress', $response);
    return $_response_object;
}

#
# replace_namespaced_network_policy
#
# 
# 
# @param string $name name of the NetworkPolicy (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1NetworkPolicy $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the NetworkPolicy',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1NetworkPolicy',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_network_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1NetworkPolicy',
        };
}
# @return V1beta1NetworkPolicy
#
sub replace_namespaced_network_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_network_policy");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_network_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_network_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1NetworkPolicy', $response);
    return $_response_object;
}

#
# replace_namespaced_replica_set
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1ReplicaSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1ReplicaSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_replica_set' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub replace_namespaced_replica_set {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_replica_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_replica_set");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_replica_set");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# replace_namespaced_replica_set_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Scale $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Scale',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_replica_set_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub replace_namespaced_replica_set_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_replica_set_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_replica_set_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_replica_set_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# replace_namespaced_replica_set_status
#
# 
# 
# @param string $name name of the ReplicaSet (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1beta1ReplicaSet $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ReplicaSet',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1ReplicaSet',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_replica_set_status' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ReplicaSet',
        };
}
# @return V1beta1ReplicaSet
#
sub replace_namespaced_replica_set_status {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_replica_set_status");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_replica_set_status");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_replica_set_status");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ReplicaSet', $response);
    return $_response_object;
}

#
# replace_namespaced_replication_controller_dummy_scale
#
# 
# 
# @param string $name name of the Scale (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param ExtensionsV1beta1Scale $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Scale',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'ExtensionsV1beta1Scale',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_replication_controller_dummy_scale' } = { 
    	summary => '',
        params => $params,
        returns => 'ExtensionsV1beta1Scale',
        };
}
# @return ExtensionsV1beta1Scale
#
sub replace_namespaced_replication_controller_dummy_scale {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_replication_controller_dummy_scale");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_replication_controller_dummy_scale");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_replication_controller_dummy_scale");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtensionsV1beta1Scale', $response);
    return $_response_object;
}

#
# replace_pod_security_policy
#
# 
# 
# @param string $name name of the PodSecurityPolicy (required)
# @param V1beta1PodSecurityPolicy $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the PodSecurityPolicy',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1PodSecurityPolicy',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_pod_security_policy' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1PodSecurityPolicy',
        };
}
# @return V1beta1PodSecurityPolicy
#
sub replace_pod_security_policy {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_pod_security_policy");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_pod_security_policy");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/podsecuritypolicies/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1PodSecurityPolicy', $response);
    return $_response_object;
}

#
# replace_third_party_resource
#
# 
# 
# @param string $name name of the ThirdPartyResource (required)
# @param V1beta1ThirdPartyResource $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ThirdPartyResource',
        required => '1',
    },
    'body' => {
        data_type => 'V1beta1ThirdPartyResource',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_third_party_resource' } = { 
    	summary => '',
        params => $params,
        returns => 'V1beta1ThirdPartyResource',
        };
}
# @return V1beta1ThirdPartyResource
#
sub replace_third_party_resource {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_third_party_resource");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_third_party_resource");
    }

    # parse inputs
    my $_resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1beta1ThirdPartyResource', $response);
    return $_response_object;
}

1;
