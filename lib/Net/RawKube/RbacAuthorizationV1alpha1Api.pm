=begin comment

Kubernetes

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.7.4

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::RawKube::RbacAuthorizationV1alpha1Api;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Net::RawKube::ApiClient;
use Net::RawKube::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => Net::RawKube::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_cluster_role
#
# 
# 
# @param V1alpha1ClusterRole $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'body' => {
        data_type => 'V1alpha1ClusterRole',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRole',
        };
}
# @return V1alpha1ClusterRole
#
sub create_cluster_role {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_cluster_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRole', $response);
    return $_response_object;
}

#
# create_cluster_role_binding
#
# 
# 
# @param V1alpha1ClusterRoleBinding $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'body' => {
        data_type => 'V1alpha1ClusterRoleBinding',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleBinding',
        };
}
# @return V1alpha1ClusterRoleBinding
#
sub create_cluster_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_cluster_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleBinding', $response);
    return $_response_object;
}

#
# create_namespaced_role
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1alpha1Role $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1Role',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1Role',
        };
}
# @return V1alpha1Role
#
sub create_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1Role', $response);
    return $_response_object;
}

#
# create_namespaced_role_binding
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1alpha1RoleBinding $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1RoleBinding',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBinding',
        };
}
# @return V1alpha1RoleBinding
#
sub create_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling create_namespaced_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBinding', $response);
    return $_response_object;
}

#
# delete_cluster_role
#
# 
# 
# @param string $name name of the ClusterRole (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRole',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_cluster_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_cluster_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_cluster_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_cluster_role_binding
#
# 
# 
# @param string $name name of the ClusterRoleBinding (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRoleBinding',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_cluster_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_cluster_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_cluster_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_cluster_role
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_cluster_role {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_cluster_role_binding
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_cluster_role_binding {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_role
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_collection_namespaced_role_binding
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_collection_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_collection_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_collection_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_role
#
# 
# 
# @param string $name name of the Role (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Role',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_role");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# delete_namespaced_role_binding
#
# 
# 
# @param string $name name of the RoleBinding (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1DeleteOptions $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param int $grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)
# @param boolean $orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)
# @param string $propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the RoleBinding',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1DeleteOptions',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'grace_period_seconds' => {
        data_type => 'int',
        description => 'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
        required => '0',
    },
    'orphan_dependents' => {
        data_type => 'boolean',
        description => 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.',
        required => '0',
    },
    'propagation_policy' => {
        data_type => 'string',
        description => 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1Status',
        };
}
# @return V1Status
#
sub delete_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_namespaced_role_binding");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling delete_namespaced_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling delete_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'grace_period_seconds'}) {
        $query_params->{'gracePeriodSeconds'} = $self->{api_client}->to_query_value($args{'grace_period_seconds'});
    }

    # query params
    if ( exists $args{'orphan_dependents'}) {
        $query_params->{'orphanDependents'} = $self->{api_client}->to_query_value($args{'orphan_dependents'});
    }

    # query params
    if ( exists $args{'propagation_policy'}) {
        $query_params->{'propagationPolicy'} = $self->{api_client}->to_query_value($args{'propagation_policy'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1Status', $response);
    return $_response_object;
}

#
# get_api_resources
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_api_resources' } = { 
    	summary => '',
        params => $params,
        returns => 'V1APIResourceList',
        };
}
# @return V1APIResourceList
#
sub get_api_resources {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1APIResourceList', $response);
    return $_response_object;
}

#
# list_cluster_role
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleList',
        };
}
# @return V1alpha1ClusterRoleList
#
sub list_cluster_role {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleList', $response);
    return $_response_object;
}

#
# list_cluster_role_binding
#
# 
# 
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleBindingList',
        };
}
# @return V1alpha1ClusterRoleBindingList
#
sub list_cluster_role_binding {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleBindingList', $response);
    return $_response_object;
}

#
# list_namespaced_role
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleList',
        };
}
# @return V1alpha1RoleList
#
sub list_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleList', $response);
    return $_response_object;
}

#
# list_namespaced_role_binding
#
# 
# 
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBindingList',
        };
}
# @return V1alpha1RoleBindingList
#
sub list_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling list_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBindingList', $response);
    return $_response_object;
}

#
# list_role_binding_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_role_binding_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBindingList',
        };
}
# @return V1alpha1RoleBindingList
#
sub list_role_binding_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBindingList', $response);
    return $_response_object;
}

#
# list_role_for_all_namespaces
#
# 
# 
# @param string $field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)
# @param boolean $include_uninitialized If true, partially initialized resources are included in the response. (optional)
# @param string $label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
# @param string $resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)
# @param int $timeout_seconds Timeout for the list/watch call. (optional)
# @param boolean $watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)
{
    my $params = {
    'field_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their fields. Defaults to everything.',
        required => '0',
    },
    'include_uninitialized' => {
        data_type => 'boolean',
        description => 'If true, partially initialized resources are included in the response.',
        required => '0',
    },
    'label_selector' => {
        data_type => 'string',
        description => 'A selector to restrict the list of returned objects by their labels. Defaults to everything.',
        required => '0',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    'resource_version' => {
        data_type => 'string',
        description => 'When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.',
        required => '0',
    },
    'timeout_seconds' => {
        data_type => 'int',
        description => 'Timeout for the list/watch call.',
        required => '0',
    },
    'watch' => {
        data_type => 'boolean',
        description => 'Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_role_for_all_namespaces' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleList',
        };
}
# @return V1alpha1RoleList
#
sub list_role_for_all_namespaces {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/roles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'field_selector'}) {
        $query_params->{'fieldSelector'} = $self->{api_client}->to_query_value($args{'field_selector'});
    }

    # query params
    if ( exists $args{'include_uninitialized'}) {
        $query_params->{'includeUninitialized'} = $self->{api_client}->to_query_value($args{'include_uninitialized'});
    }

    # query params
    if ( exists $args{'label_selector'}) {
        $query_params->{'labelSelector'} = $self->{api_client}->to_query_value($args{'label_selector'});
    }

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # query params
    if ( exists $args{'resource_version'}) {
        $query_params->{'resourceVersion'} = $self->{api_client}->to_query_value($args{'resource_version'});
    }

    # query params
    if ( exists $args{'timeout_seconds'}) {
        $query_params->{'timeoutSeconds'} = $self->{api_client}->to_query_value($args{'timeout_seconds'});
    }

    # query params
    if ( exists $args{'watch'}) {
        $query_params->{'watch'} = $self->{api_client}->to_query_value($args{'watch'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleList', $response);
    return $_response_object;
}

#
# patch_cluster_role
#
# 
# 
# @param string $name name of the ClusterRole (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRole',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRole',
        };
}
# @return V1alpha1ClusterRole
#
sub patch_cluster_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_cluster_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_cluster_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRole', $response);
    return $_response_object;
}

#
# patch_cluster_role_binding
#
# 
# 
# @param string $name name of the ClusterRoleBinding (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRoleBinding',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleBinding',
        };
}
# @return V1alpha1ClusterRoleBinding
#
sub patch_cluster_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_cluster_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_cluster_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleBinding', $response);
    return $_response_object;
}

#
# patch_namespaced_role
#
# 
# 
# @param string $name name of the Role (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Role',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1Role',
        };
}
# @return V1alpha1Role
#
sub patch_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_role");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1Role', $response);
    return $_response_object;
}

#
# patch_namespaced_role_binding
#
# 
# 
# @param string $name name of the RoleBinding (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param object $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the RoleBinding',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'patch_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBinding',
        };
}
# @return V1alpha1RoleBinding
#
sub patch_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling patch_namespaced_role_binding");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling patch_namespaced_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling patch_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBinding', $response);
    return $_response_object;
}

#
# read_cluster_role
#
# 
# 
# @param string $name name of the ClusterRole (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRole',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRole',
        };
}
# @return V1alpha1ClusterRole
#
sub read_cluster_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_cluster_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRole', $response);
    return $_response_object;
}

#
# read_cluster_role_binding
#
# 
# 
# @param string $name name of the ClusterRoleBinding (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRoleBinding',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleBinding',
        };
}
# @return V1alpha1ClusterRoleBinding
#
sub read_cluster_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_cluster_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleBinding', $response);
    return $_response_object;
}

#
# read_namespaced_role
#
# 
# 
# @param string $name name of the Role (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Role',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1Role',
        };
}
# @return V1alpha1Role
#
sub read_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_role");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1Role', $response);
    return $_response_object;
}

#
# read_namespaced_role_binding
#
# 
# 
# @param string $name name of the RoleBinding (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the RoleBinding',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBinding',
        };
}
# @return V1alpha1RoleBinding
#
sub read_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling read_namespaced_role_binding");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling read_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBinding', $response);
    return $_response_object;
}

#
# replace_cluster_role
#
# 
# 
# @param string $name name of the ClusterRole (required)
# @param V1alpha1ClusterRole $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRole',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1ClusterRole',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_cluster_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRole',
        };
}
# @return V1alpha1ClusterRole
#
sub replace_cluster_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_cluster_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_cluster_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRole', $response);
    return $_response_object;
}

#
# replace_cluster_role_binding
#
# 
# 
# @param string $name name of the ClusterRoleBinding (required)
# @param V1alpha1ClusterRoleBinding $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the ClusterRoleBinding',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1ClusterRoleBinding',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_cluster_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1ClusterRoleBinding',
        };
}
# @return V1alpha1ClusterRoleBinding
#
sub replace_cluster_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_cluster_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_cluster_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1ClusterRoleBinding', $response);
    return $_response_object;
}

#
# replace_namespaced_role
#
# 
# 
# @param string $name name of the Role (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1alpha1Role $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the Role',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1Role',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_role' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1Role',
        };
}
# @return V1alpha1Role
#
sub replace_namespaced_role {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_role");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_role");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_role");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1Role', $response);
    return $_response_object;
}

#
# replace_namespaced_role_binding
#
# 
# 
# @param string $name name of the RoleBinding (required)
# @param string $namespace object name and auth scope, such as for teams and projects (required)
# @param V1alpha1RoleBinding $body  (required)
# @param string $pretty If &#39;true&#39;, then the output is pretty printed. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'name of the RoleBinding',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'object name and auth scope, such as for teams and projects',
        required => '1',
    },
    'body' => {
        data_type => 'V1alpha1RoleBinding',
        description => '',
        required => '1',
    },
    'pretty' => {
        data_type => 'string',
        description => 'If &#39;true&#39;, then the output is pretty printed.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'replace_namespaced_role_binding' } = { 
    	summary => '',
        params => $params,
        returns => 'V1alpha1RoleBinding',
        };
}
# @return V1alpha1RoleBinding
#
sub replace_namespaced_role_binding {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling replace_namespaced_role_binding");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling replace_namespaced_role_binding");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling replace_namespaced_role_binding");
    }

    # parse inputs
    my $_resource_path = '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('*/*');

    # query params
    if ( exists $args{'pretty'}) {
        $query_params->{'pretty'} = $self->{api_client}->to_query_value($args{'pretty'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'namespace'}) {
        my $_base_variable = "{" . "namespace" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'namespace'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BearerToken )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1alpha1RoleBinding', $response);
    return $_response_object;
}

1;
